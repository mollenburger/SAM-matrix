<?xml version="1.0" encoding="UTF-8"?>
<queries>
  <aQuery>
<supplyDemandQuery title="fertilizer consumption by crop type">
 <axis1 name="sector">sector</axis1>
 <axis2 name="Year">demand-physical[@vintage]</axis2>
 <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and not (@name='Exports_N fertilizer')]// *[@type='input' and (@name='N fertilizer')]/demand-physical/node()</xPath>
 <comments/>
</supplyDemandQuery>
</aQuery>
<aQuery>
<supplyDemandQuery title="P_fertilizer consumption by crop type">
  <axis1 name="sector">sector</axis1>
  <axis2 name="Year">demand-physical[@vintage]</axis2>
  <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' and (@name='P_fertilizer')]/demand-physical/node()</xPath>
  <comments/>
</supplyDemandQuery>
</aQuery>
<aQuery>
  <supplyDemandQuery title="ag production by crop type">
      <axis1 name="sector">sector[@name]</axis1>
      <axis2 name="Year">physical-output[@vintage]</axis2>
      <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]//output-primary/physical-output/node()</xPath>
      <comments>primary output only (no residue biomass)</comments>
  </supplyDemandQuery>
</aQuery>
<aQuery>
  <supplyDemandQuery title="ag production by subsector (land use region)">
      <axis1 name="technology">technology[@name]</axis1>
      <axis2 name="Year">physical-output[@vintage]</axis2>
      <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/*[@type='subsector']//output-primary/physical-output/node()</xPath>
      <comments>primary output only (no residue biomass)</comments>
  </supplyDemandQuery>
</aQuery>
<aQuery>
  <resourceQuery title="Basin level available runoff">
      <axis1 name="Basin">resource[@name]</axis1>
      <axis2 name="Year">max-annual-subresource[@year]</axis2>
      <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'resource' and contains(@name, 'water withdrawals')]/*[@type = 'subresource' and contains(@name, 'runoff')]/max-annual-subresource/node()</xPath>
      <comments/>
  </resourceQuery>
</aQuery>
<aQuery>
  <resourceQuery title="Water withdrawals by water source (runoff vs. groundwater)">
      <axis1 name="subresource">subresource[@name]</axis1>
      <axis2 name="Year">production[@year]</axis2>
      <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'resource' and contains(@name, 'water withdrawals')]//production/node()</xPath>
      <comments/>
  </resourceQuery>
</aQuery>
<aQuery>
  <query title="land allocation by crop">
    <axis1 name="LandLeaf">LandLeaf[@crop]</axis1>
    <axis2 name="Year">land-allocation[@year]</axis2>
    <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//land-allocation/text()</xPath>
    <comments/>
</query>
</aQuery>
<aQuery>
  <supplyDemandQuery title="irrigation water withdrawals by crop type and land region">
    <axis1 name="sector">sector</axis1>
    <axis2 name="Year">demand-physical[@vintage]</axis2>
    <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']//*[@type='input' and contains(@name, 'water_td_irr')
               and ends-with(@name, '_W')]/demand-physical/node()</xPath>
    <comments/>
</supplyDemandQuery>
</aQuery>
<aQuery>
  <supplyDemandQuery title="outputs by subsector">
      <axis1 name="sector">sector[@name]</axis1>
      <axis2 name="Year">physical-output[@vintage]</axis2>
      <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']//*[@type='output']/physical-output/node()</xPath>
      <comments/>
  </supplyDemandQuery>
</aQuery>
<aQuery>
<supplyDemandQuery title="ag commodity prices">
    <axis1 name="sector">sector</axis1>
    <axis2 name="Year">cost</axis2>
    <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/cost/text()</xPath>
    <comments/>
</supplyDemandQuery>
</aQuery>
<aQuery>
  <gdpQueryBuilder title="GDP MER by region">
      <axis1 name="region">region</axis1>
      <axis2 name="Year">gdp-mer</axis2>
      <xPath buildList="true" dataName="gdp-mer" group="false" sumAll="false">GDP/gdp-mer/text()</xPath>
      <comments/>
  </gdpQueryBuilder>
</aQuery>
<aQuery>
  <gdpQueryBuilder title="GDP per capita PPP by region">
    <axis1 name="region">region</axis1>
    <axis2 name="Year">gdp-per-capita-ppp</axis2>
    <xPath buildList="true" dataName="gdp-per-capita-ppp" group="false" sumAll="false">GDP/gdp-per-capita-ppp/text()</xPath>
    <comments/>
</gdpQueryBuilder>
</aQuery>
<aQuery>
  <emissionsQueryBuilder title="nonCO2 emissions by sector">
    <axis1 name="GHG">GHG</axis1>
    <axis2 name="Year">emissions</axis2>
    <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']//*[@type = 'GHG']/emissions/node()</xPath>
    <comments/>
</emissionsQueryBuilder>
</aQuery>
<aQuery>
  <demographicsQuery title="population by region">
    <axis1 name="region">region</axis1>
    <axis2 name="Year">populationMiniCAM</axis2>
    <xPath buildList="true" dataName="total-population" group="false" sumAll="false">demographics/populationMiniCAM/total-population/node()</xPath>
    <comments/>
</demographicsQuery>
</aQuery>
  <aQuery>
  <supplyDemandQuery title="water withdrawals by sector">
      <axis1 name="sector">sector</axis1>
      <axis2 name="Year">demand-physical[@vintage]</axis2>
      <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' (:collapse:) and contains(@name,'water_td')
           and ends-with(@name,'_W')]/demand-physical/node()</xPath>
      <comments/>
      <labelRewriteList append-values="false">
          <level name="sector">
              <rewrite from="elec_Gen_III" to="electricity"/>
              <rewrite from="elec_CSP_storage" to="electricity"/>
              <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
              <rewrite from="elec_geothermal" to="electricity"/>
              <rewrite from="elec_refined liquids (CC)" to="electricity"/>
              <rewrite from="elec_Gen_II_LWR" to="electricity"/>
              <rewrite from="elec_gas (steam/CT)" to="electricity"/>
              <rewrite from="elec_coal (IGCC)" to="electricity"/>
              <rewrite from="elec_gas (CC)" to="electricity"/>
              <rewrite from="elec_biomass (IGCC)" to="electricity"/>
              <rewrite from="elec_coal (conv pul)" to="electricity"/>
              <rewrite from="elec_CSP" to="electricity"/>
              <rewrite from="elec_biomass (conv)" to="electricity"/>
          </level>
      </labelRewriteList>
  </supplyDemandQuery>
  </aQuery>
  <aQuery>
    <supplyDemandQuery title="CO2 emissions by sector (no bio)">
      <axis1 name="sector">sector[@name]</axis1>
      <axis2 name="Year">emissions[@year]</axis2>
      <xPath buildList="true" dataName="input" group="false" sumAll="false"><![CDATA[

              declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
              let $scn := $parent/ancestor::scenario,
              $rgn := $parent (: /ancestor::region :)
              return
              document { element scenario {
              $scn/@*,
              element region {
              $rgn/@*,
              $append
              }
              }
              }
              (: I can get by with just the scenario and region
              let $new_node := element {local-name($parent)} {$parent/@*, $append}
              return
              if(local-name($parent) != 'scenario')
              then local:append-heirarchy($parent/parent::*, $new_node)
              else document { $new_node } :)
              };
              declare function local:get-carbon-coef($good as xs:string) as xs:decimal {
              let $carbonCoefs := (
              <PrimaryFuelCO2Coef name="biomass">0</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="coal">27.3</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="crude oil">19.6</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="delivered biomass">23</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="delivered coal">27.3</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="delivered gas">14.2</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="gas pipeline">14.2</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="gas processing">14.2</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="limestone">0.08</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="natural gas">14.2</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="refined liquids enduse">19.6</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="refined liquids industrial">19.6</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="refining">19.6</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="regional biomass">23</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="regional biomassOil">19.6</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="regional coal">27.3</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="regional corn for ethanol">19.6</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="regional natural gas">14.2</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="regional oil">19.6</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="regional sugar for ethanol">19.6</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="traded unconventional oil">19.6</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="unconventional oil">21.1</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="unconventional oil production">19.6</PrimaryFuelCO2Coef>,
              <PrimaryFuelCO2Coef name="wholesale gas">14.2</PrimaryFuelCO2Coef>),
              $currCoef := $carbonCoefs[@name=$good]/text()
              return if(exists($currCoef)) then $currCoef else 0.0
              };


              declare function local:is-carbonatious-fuel($good as xs:string) as xs:boolean {
              not(local:get-carbon-coef($good) = 0.0)
              };
              declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
              if(empty($inputNameQueue)) then $coefs
              else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('traded unconventional oil'),
              $inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]) or not(local:is-carbonatious-fuel($inputNameQueue[1])))
              then
              local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
              else
              let $inputName := $inputNameQueue[1],
              $newInputNameQueue := remove($inputNameQueue, 1),
              $useInputs := $currTree//*[@type='input' and @name=$inputName],
              $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
              $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
              return element input {
              attribute vintage { $vintage },
              text {
              sum($useInputs/demand-physical[@vintage=$vintage])
              }
              },
              $new_coefs := if(empty($useSectors)) then
              $coefs
              else
              $coefs | element sector {
              attribute name { $inputName },
              for $output in $useSectors
              return element output {
              attribute name { $output },
              for $inputSum in $totalInputSum
              let $currSectorInputs := $useInputs[ancestor::*[@type='sector' and @name=$output]],
              $outputSum := sum($currSectorInputs/demand-physical[@vintage=$inputSum/@vintage]),
              $carbonIn := sum($currSectorInputs/parent::*//carbon-content[@vintage=$inputSum/@vintage]),
              $carbonOut := sum($currSectorInputs/parent::*/output-primary/physical-output[@vintage=$inputSum/@vintage]) *
              local:get-carbon-coef($output)
              return (element share {
              attribute vintage { $inputSum/@vintage },
              text { $outputSum div $inputSum }
              }, element carbon_ratio {
              attribute vintage { $inputSum/@vintage },
              text{ if($carbonIn > 0) then $carbonOut div $carbonIn else 0 }
              })
              }
              }
              return
              local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
              };
              declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
              if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then
              for $output in $coefs[@name=$outputName]/output
              let $emiss_go := for $year in distinct-values($emissions/@year)
              let $emissThisVintage := $emissions[@year=$year],
              $firstEmiss := $emissThisVintage[1],
              $emissSum := sum($emissThisVintage),
              $shareThisVintage := $output/share[@vintage=$year],
              $carbonRatioThisVintage := $output/carbon_ratio[@vintage=$year],
              $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage
              where $coefThisVintage > 0
              return element { local-name($firstEmiss) } {
              $firstEmiss/@*,
              text{ $emissSum * $coefThisVintage }
              },
              $emiss_stay := for $year in distinct-values($emissions/@year)
              let $emissThisVintage := $emissions[@year=$year],
              $firstEmiss := $emissThisVintage[1],
              $emissSum := sum($emissThisVintage),
              $shareThisVintage := $output/share[@vintage=$year],
              $carbonRatioThisVintage := 1.0 - $output/carbon_ratio[@vintage=$year],
              $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage
              where $coefThisVintage > 0
              return element { local-name($firstEmiss) } {
              $firstEmiss/@*,
              text{ $emissSum * $coefThisVintage }
              }
              return local:apply-coefs($output/@name, $emiss_go, $coefs) |
              element sector {
              attribute name { $output/@name},
              attribute type { 'sector' },
              $emiss_stay
              }
              else if( abs(sum($emissions)) > 0.001) then
              element sector {
              attribute name { $outputName },
              attribute type { 'sector' },
              $emissions
              }
              else
              (: These are the residuals from chasing simulenaties, I've left this here
              for debuging purposes :)
              element sector {
              attribute name { $outputName },
              attribute type { 'sector' }(:,
              $emissions:)
              }
              };
              declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* {
              (:unordered { :)
              let $regionsG := if(not($regions[1] = 'Global'))
              then $regions
              else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
              return
              for $scenario in $scenarios,
              $region in $regionsG
              let $scenario_split := tokenize($scenario, ' '),
              $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
              $sector_emiss := $currTree/*[@type='sector' and not(@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')]//CO2[@type='GHG' (:collapse:) and @name='CO2']/emissions/text(),
              $currEmissSectors := $currTree/*[@type='sector' and (@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')],
              $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false()),
              $downstream_emiss := for $sectorName in distinct-values($currEmissSectors/@name)
              return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2[@name='CO2']/emissions, $coefs))//text()
              return ($sector_emiss, $downstream_emiss )
              (:  } :)
              };
              local:run-emiss-by-enduse((:scenarios:), (:regions:), (:collection:))


                  ]]></xPath>
      <comments/>
      <labelRewriteList append-values="false">
          <level name="sector">
              <rewrite from="elec_Gen_III" to="electricity"/>
              <rewrite from="elec_CSP_storage" to="electricity"/>
              <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
              <rewrite from="elec_geothermal" to="electricity"/>
              <rewrite from="elec_refined liquids (CC)" to="electricity"/>
              <rewrite from="elec_Gen_II_LWR" to="electricity"/>
              <rewrite from="elec_gas (steam/CT)" to="electricity"/>
              <rewrite from="elec_coal (IGCC)" to="electricity"/>
              <rewrite from="elec_gas (CC)" to="electricity"/>
              <rewrite from="elec_biomass (IGCC)" to="electricity"/>
              <rewrite from="elec_coal (conv pul)" to="electricity"/>
              <rewrite from="elec_CSP" to="electricity"/>
              <rewrite from="elec_biomass (conv)" to="electricity"/>
          </level>
      </labelRewriteList>
  </supplyDemandQuery>
  </aQuery>
</queries>
